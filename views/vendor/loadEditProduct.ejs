<link rel="stylesheet" href="/styles/vendor/loadEditProducts.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css">

<div class="product-form-container">
  <h1 class="page-title"><%= isEdit ? 'Edit Product' : 'Add Product' %></h1>

  <nav class="breadcrumb">
    <a href="/vendor/dashboard">Dashboard</a>
    <span class="breadcrumb-separator">></span>
    <a href="/vendor/products">Products</a>
    <span class="breadcrumb-separator">></span>
    <a href="<%= isEdit ? `/vendor/products/edit-product/${product._id}` : '/vendor/products/add-product' %>">
      <%= isEdit ? 'Edit Product' : 'Add Product' %>
    </a>
  </nav>

  <!-- NOTE: we submit via axios (multipart/form-data). Keep enctype for consistency. -->
  <form id="product-form" enctype="multipart/form-data">
    <div class="narrow-content">
      <div class="product-card">
        <div class="form-group">
          <label class="form-label" for="name">Product Name</label>
          <input type="text" id="name" name="name" class="form-input" aria-label="Product name"
                 value="<%= isEdit ? product?.name : '' %>">
        </div>

        <div class="form-group">
          <label class="form-label" for="description">Description</label>
          <textarea id="description" name="description" class="form-input form-textarea"
                    aria-label="Product description"><%= isEdit ? product?.description : '' %></textarea>
        </div>

        <div class="price-row">
          <div class="form-group">
            <label class="form-label" for="price">Price</label>
            <input type="number" id="price" name="price" class="form-input" step="0.01" min="0"
                   value="<%= isEdit ? product?.price : '' %>" aria-label="Product price">
          </div>

          <div class="form-group">
            <label class="form-label" for="discountedPrice">Discount Price</label>
            <input type="number" id="discountedPrice" name="discountedPrice" class="form-input" step="0.01" min="0"
                   value="<%= isEdit ? product?.discountedPrice : '' %>" aria-label="Discounted price">
          </div>

          <div class="form-group">
            <label class="form-label">Listing Status</label>
            <div class="radio-group">
              <label>
                <input type="radio" name="isListed" value="true"
                       <%= isEdit ? (product?.isListed ? 'checked' : '') : 'checked' %> aria-label="List product">Listed
              </label>
              <label>
                <input type="radio" name="isListed" value="false"
                       <%= isEdit && !product?.isListed ? 'checked' : '' %> aria-label="Unlist product">Unlisted
              </label>
            </div>
          </div>
        </div>

        <div class="form-group">
          <label class="form-label" for="category">Select Category</label>
          <select id="category" name="category" class="form-select" aria-label="Product category">
            <!-- only show placeholder selected in add mode -->
            <option value="" disabled <%= !isEdit ? 'selected' : '' %>>Select a category</option>

            <% if (Array.isArray(categories) && categories.length > 0) { %>
              <% categories.forEach(cat => { %>
                <option value="<%= cat._id %>"
                  <%= isEdit && product?.category?._id?.toString() === cat._id.toString() ? 'selected' : '' %>>
                  <%= cat.name %>
                </option>
              <% }) %>
            <% } else { %>
              <option value="electronics">Electronics</option>
            <% } %>
          </select>
        </div>
      </div>
    </div>

    <!-- VARIANTS -->
    <div class="narrow-content">
      <div class="product-card">
        <h3 class="card-title">Variant Images</h3>

        <div class="image-upload-section">
          <% 
            // Prepare variants array for rendering: if edit use product.variants, otherwise single empty variant
            const renderVariants = (isEdit && Array.isArray(product?.variants)) ? product.variants : [{ images: [{}, {}, {}], color: '', stock: '' }];
            renderVariants.forEach((variant, vIndex) => { 
          %>
            <div class="variant-container" id="variant-<%= vIndex %>">
              <div class="variant-header">
                <h4 class="variant-title">Variant <%= vIndex + 1 %></h4>
                <div class="variant-controls">
                  <input type="text" placeholder="Color name" name="variants[<%= vIndex %>][color]"
                         value="<%= variant.color || '' %>" class="form-input"
                         aria-label="Color for variant <%= vIndex + 1 %>">
                  <!-- include variant _id when editing so backend can match by _id -->
                  <% if (isEdit && variant._id) { %>
                    <input type="hidden" name="variants[<%= vIndex %>][_id]" value="<%= variant._id %>">
                  <% } %>
                  <button type="button" class="custom-btn custom-btn-secondary"
                          onclick="removeVariant(<%= vIndex %>)"
                          aria-label="Remove variant <%= vIndex + 1 %>">Remove</button>
                </div>
              </div>

              <div class="variant-images">
                <% (variant.images || [{}, {}, {}]).forEach((img, imgIndex) => { %>
                  <div class="image-upload" data-variant="<%= vIndex %>" data-image="<%= imgIndex %>">
                    <div class="image-preview-container <%= img?.url ? '' : 'hidden' %>">
                      <img class="image-preview" src="<%= img?.url || '' %>" alt="Preview">
                      <button type="button" class="delete-image-btn" aria-label="Delete image">
                        <i class="fas fa-times"></i>
                      </button>
                    </div>

                    <div class="upload-icon <%= img?.url ? 'hidden' : '' %>">
                      <i class="fas fa-image"></i>
                    </div>

                    <div class="upload-text <%= img?.url ? 'hidden' : '' %>"
                         aria-label="Image <%= imgIndex + 1 %> for variant <%= vIndex + 1 %>">
                      Image <%= imgIndex + 1 %>
                    </div>

                    <!-- file input names match backend parsing: variants[i][images][j] -->
                    <input type="file" name="variants[<%= vIndex %>][images][<%= imgIndex %>]"
                           accept="image/*" style="display:none;"
                           id="variantImage-<%= vIndex %>-<%= imgIndex %>"
                           aria-label="Image <%= imgIndex + 1 %> for variant <%= vIndex + 1 %>">

                    <!-- existing image URL (if editing). data-public-id holds Cloudinary public_id (if available) -->
                    <input type="hidden" name="variants[<%= vIndex %>][existingImages][<%= imgIndex %>]"
                           class="existing-image-data" value="<%= img?.url || '' %>"
                           data-public-id="<%= img?.public_id || '' %>">

                    <button type="button" class="upload-btn"
                            onclick="document.getElementById('variantImage-<%= vIndex %>-<%= imgIndex %>').click()"
                            aria-label="Browse image <%= imgIndex + 1 %> for variant <%= vIndex + 1 %>">
                      BROWSE IMAGE
                    </button>
                  </div>
                <% }) %>
              </div>

              <div class="form-group">
                <label class="form-label" for="stockQuantity-<%= vIndex %>">Stock Quantity</label>
                <input type="number" id="stockQuantity-<%= vIndex %>" name="variants[<%= vIndex %>][stock]"
                       class="form-input" min="0" value="<%= variant.stock || '' %>"
                       aria-label="Stock quantity for variant <%= vIndex + 1 %>">
              </div>
            </div>
          <% }) %>
        </div>

        <div style="text-align: center;">
          <button id="add-variant-button" type="button" class="custom-btn custom-btn-secondary"
                  onclick="addVariant()">+ ADD ANOTHER VARIANT</button>
        </div>
      </div>
    </div>

    <!-- SPECIFICATIONS -->
    <div class="narrow-content">
      <div class="product-card">
        <h3 class="card-title">Product Specifications</h3>
        <div class="specifications-grid">
          <div class="form-group">
            <label class="form-label" for="StrapStyle">Strap Style</label>
            <input type="text" id="StrapStyle" name="specifications[strapStyle]" class="form-input"
                   aria-label="Strap style" value="<%= isEdit ? product?.specifications?.strapStyle : '' %>">
          </div>
          <div class="form-group">
            <label class="form-label" for="Weight">Weight</label>
            <input type="text" id="Weight" name="specifications[weight]" class="form-input"
                   aria-label="Weight" value="<%= isEdit ? product?.specifications?.weight : '' %>">
          </div>
          <div class="form-group">
            <label class="form-label" for="DialType">Dial Type</label>
            <input type="text" id="DialType" name="specifications[dialType]" class="form-input"
                   aria-label="Dial type" value="<%= isEdit ? product?.specifications?.dialType : '' %>">
          </div>
          <div class="form-group">
            <label class="form-label" for="warrantyPeriod">Warranty Period</label>
            <input type="text" id="warrantyPeriod" name="specifications[warrantyPeriod]" class="form-input"
                   aria-label="Warranty period" value="<%= isEdit ? product?.specifications?.warrantyPeriod : '' %>">
          </div>
          <div class="form-group">
            <label class="form-label" for="Durability">Durability</label>
            <input type="text" id="Durability" name="specifications[durability]" class="form-input"
                   aria-label="Durability" value="<%= isEdit ? product?.specifications?.durability : '' %>">
          </div>
          <div class="form-group">
            <label class="form-label" for="AdditionalInformation">Additional Information</label>
            <textarea id="AdditionalInformation" name="specifications[additionalInformation]" class="form-input form-textarea"
                      aria-label="Additional information"><%= isEdit ? product?.specifications?.additionalInformation : '' %></textarea>
          </div>
        </div>
      </div>
    </div>

    <div class="action-buttons">
      <button type="submit" class="custom-btn custom-btn-primary"
              aria-label="<%= isEdit ? 'Update product' : 'Add product' %>">
        <%= isEdit ? 'UPDATE PRODUCT' : 'ADD PRODUCT' %>
      </button>
      <button type="button" class="custom-btn custom-btn-secondary" onclick="window.history.back()" aria-label="Cancel">
        CANCEL
      </button>
    </div>
  </form>
</div>

<!-- CROP MODAL (unchanged) -->
<div id="cropModal" class="modal">
  <div class="modal-content">
    <div class="modal-header">
      <h3>Crop Image</h3>
      <span class="close">&times;</span>
    </div>
    <div class="modal-body">
      <div class="crop-container">
        <img id="cropImage" src="" alt="Image to crop">
      </div>
      <div class="crop-actions">
        <button type="button" id="cancelCrop" class="custom-btn custom-btn-secondary">Cancel</button>
        <button type="button" id="applyCrop" class="custom-btn custom-btn-primary">Apply Crop</button>
      </div>
    </div>
  </div>
</div>

<!-- SCRIPTS -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
  // variantCount initialised from rendered variants length
  var variantCount = <%= renderVariants.length %>;
  const form = document.getElementById('product-form');
  let currentCropper = null;
  let currentUploadArea = null;

  // Use delegation and attach listeners only once
  function init() {
    setupFileInputDelegation();
    setupDragAndDropDelegation();
    setupFormSubmission();
    setupCropModal();
    setupDeleteDelegation();
  }

  // Crop modal handlers (kept same logic)
  function setupCropModal() {
    const modal = document.getElementById('cropModal');
    const closeBtn = document.querySelector('.close');
    const cancelBtn = document.getElementById('cancelCrop');
    const applyBtn = document.getElementById('applyCrop');

    const closeModal = () => {
      modal.style.display = 'none';
      if (currentCropper) {
        currentCropper.destroy();
        currentCropper = null;
        currentUploadArea = null;
      }
    };

    closeBtn.onclick = cancelBtn.onclick = closeModal;

    applyBtn.onclick = function () {
      if (currentCropper && currentUploadArea) {
        const canvas = currentCropper.getCroppedCanvas({
          width: 800, height: 800, fillColor: '#fff',
          imageSmoothingEnabled: true, imageSmoothingQuality: 'high'
        });

        canvas.toBlob((blob) => {
          const fileInput = currentUploadArea.querySelector('input[type="file"]');
          const existingInput = currentUploadArea.querySelector('.existing-image-data');
          const previewImg = currentUploadArea.querySelector('.image-preview');

          // update preview
          const reader = new FileReader();
          reader.onload = () => previewImg.src = reader.result;
          reader.readAsDataURL(blob);

          // set blob to file input
          const file = new File([blob], `cropped-${Date.now()}.jpg`, { type: 'image/jpeg' });
          const dt = new DataTransfer();
          dt.items.add(file);
          fileInput.files = dt.files;

          // clear existing image placeholder if replacing
          if (existingInput) existingInput.value = '';

          // update UI
          currentUploadArea.querySelector('.image-preview-container').classList.remove('hidden');
          currentUploadArea.querySelector('.upload-icon').classList.add('hidden');
          currentUploadArea.querySelector('.upload-text').classList.add('hidden');

          // close modal
          closeModal();
        }, 'image/jpeg', 0.9);
      }
    };

    window.onclick = function (event) {
      if (event.target == modal) closeModal();
    };
  }

  // Single delegated change listener for file inputs (prevents duplicates)
  function setupFileInputDelegation() {
    document.addEventListener('change', function (e) {
      const input = e.target;
      if (!input || input.tagName !== 'INPUT' || input.type !== 'file') return;

      if (input.files && input.files[0]) {
        const file = input.files[0];
        if (!file.type.match('image.*')) {
          Swal.fire({
            title: 'Error!', text: 'Please select an image file.', icon: 'error',
            confirmButtonColor: '#000', customClass: { confirmButton: 'swal-confirm-black' }
          });
          input.value = '';
          return;
        }

        const reader = new FileReader();
        reader.onload = function (ev) {
          currentUploadArea = input.closest('.image-upload');
          const modal = document.getElementById('cropModal');
          const cropImage = document.getElementById('cropImage');
          cropImage.src = ev.target.result;
          modal.style.display = 'block';

          setTimeout(() => {
            if (currentCropper) currentCropper.destroy();
            currentCropper = new Cropper(cropImage, {
              aspectRatio: 1, viewMode: 1, guides: true, background: false, autoCropArea: 0.8
            });
          }, 100);
        };
        reader.readAsDataURL(file);
      }
    });
  }

  // Delegated drag/drop for .image-upload areas
  function setupDragAndDropDelegation() {
    document.addEventListener('dragover', function (e) {
      const uploadArea = e.target.closest('.image-upload');
      if (!uploadArea) return;
      e.preventDefault();
      uploadArea.classList.add('dragover');
    });

    document.addEventListener('dragleave', function (e) {
      const uploadArea = e.target.closest('.image-upload');
      if (!uploadArea) return;
      e.preventDefault();
      uploadArea.classList.remove('dragover');
    });

    document.addEventListener('drop', function (e) {
      const uploadArea = e.target.closest('.image-upload');
      if (!uploadArea) return;
      e.preventDefault();
      uploadArea.classList.remove('dragover');

      const files = e.dataTransfer.files;
      if (files.length > 0 && files[0].type.startsWith('image/')) {
        const fileInput = uploadArea.querySelector('input[type="file"]');
        const dt = new DataTransfer();
        dt.items.add(files[0]);
        fileInput.files = dt.files;
        fileInput.dispatchEvent(new Event('change'));
      } else {
        Swal.fire({
          title: 'Error!', text: 'Please drop an image file.', icon: 'error',
          confirmButtonColor: '#000', customClass: { confirmButton: 'swal-confirm-black' }
        });
      }
    });
  }

  // Delegated delete button listener
  function setupDeleteDelegation() {
    document.addEventListener('click', function (e) {
      const deleteBtn = e.target.closest('.delete-image-btn');
      if (!deleteBtn) return;

      const uploadArea = deleteBtn.closest('.image-upload');
      const fileInput = uploadArea.querySelector('input[type="file"]');
      const existingInput = uploadArea.querySelector('.existing-image-data');
      const previewContainer = uploadArea.querySelector('.image-preview-container');
      const uploadIcon = uploadArea.querySelector('.upload-icon');
      const uploadText = uploadArea.querySelector('.upload-text');

      // clear inputs and ui
      if (fileInput) fileInput.value = '';
      if (existingInput) existingInput.value = '';
      previewContainer.classList.add('hidden');
      uploadIcon.classList.remove('hidden');
      uploadText.classList.remove('hidden');
      const previewImg = previewContainer.querySelector('.image-preview');
      if (previewImg) previewImg.src = '';
    });
  }

  // Add new variant (keeps naming consistent)
  function addVariant() {
    const container = document.querySelector('.image-upload-section');
    const idx = variantCount;
    const variantHtml = `
      <div class="variant-container" id="variant-${idx}">
        <div class="variant-header">
          <h4 class="variant-title">Variant ${idx + 1}</h4>
          <div class="variant-controls">
            <input type="text" placeholder="Color name" name="variants[${idx}][color]" class="form-input" aria-label="Color for variant ${idx + 1}">
            <button type="button" class="custom-btn custom-btn-secondary" onclick="removeVariant(${idx})" aria-label="Remove variant ${idx + 1}">Remove</button>
          </div>
        </div>

        <div class="form-group">
          <label class="form-label">Product Images (3 images)</label>
          <div class="variant-images">
            ${[0,1,2].map(imgIndex => `
              <div class="image-upload" data-variant="${idx}" data-image="${imgIndex}">
                <div class="upload-icon"><i class="fas fa-image"></i></div>
                <div class="upload-text" aria-label="Image ${imgIndex + 1} for variant ${idx + 1}">Image ${imgIndex + 1}</div>
                <div class="image-preview-container hidden">
                  <img class="image-preview" src="" alt="Preview">
                  <button type="button" class="delete-image-btn" aria-label="Delete image"><i class="fas fa-times"></i></button>
                </div>

                <input type="file" name="variants[${idx}][images][${imgIndex}]" accept="image/*" style="display:none;" id="variantImage-${idx}-${imgIndex}" aria-label="Image ${imgIndex + 1} for variant ${idx + 1}">
                <input type="hidden" name="variants[${idx}][existingImages][${imgIndex}]" class="existing-image-data" value="">
                <button type="button" class="upload-btn" onclick="document.getElementById('variantImage-${idx}-${imgIndex}').click()" aria-label="Browse image ${imgIndex + 1} for variant ${idx + 1}">BROWSE IMAGE</button>
              </div>
            `).join('')}
          </div>
        </div>

        <div class="form-group">
          <label class="form-label" for="stockQuantity-${idx}">Stock Quantity</label>
          <input type="number" id="stockQuantity-${idx}" name="variants[${idx}][stock]" class="form-input" min="0" aria-label="Stock quantity for variant ${idx + 1}">
        </div>
      </div>
    `;

    container.insertAdjacentHTML('beforeend', variantHtml);
    variantCount++;
  }

  // Remove variant and reindex names/ids so backend expects 0..N-1 indexes
  function removeVariant(variantId) {
    const variant = document.getElementById(`variant-${variantId}`);
    const totalVariants = document.querySelectorAll('.variant-container').length;

    if (!variant) return;

    if (totalVariants > 1) {
      variant.remove();
      reindexVariants();
    } else {
      Swal.fire({
        title: 'Warning!', text: 'At least one variant is required.', icon: 'warning',
        confirmButtonColor: '#000', customClass: { confirmButton: 'swal-confirm-black' }
      });
    }
  }

  // Reindex all variant DOM elements (names and ids)
  function reindexVariants() {
    const variants = document.querySelectorAll('.variant-container');
    variants.forEach((variant, index) => {
      variant.id = `variant-${index}`;
      const title = variant.querySelector('.variant-title');
      if (title) title.textContent = `Variant ${index + 1}`;

      const colorInput = variant.querySelector('input[ name$="[color]"]') || variant.querySelector('input[name*="[color]"]');
      const stockInput = variant.querySelector('input[ name$="[stock]"]') || variant.querySelector('input[name*="[stock]"]');
      if (colorInput) colorInput.name = `variants[${index}][color]`;
      if (stockInput) {
        stockInput.name = `variants[${index}][stock]`;
        stockInput.id = `stockQuantity-${index}`;
      }

      // update image inputs and existing hidden inputs
      const imageUploads = variant.querySelectorAll('.image-upload');
      imageUploads.forEach((uploadArea, imgIndex) => {
        uploadArea.setAttribute('data-variant', index);
        uploadArea.setAttribute('data-image', imgIndex);

        const fileInput = uploadArea.querySelector('input[type="file"]');
        if (fileInput) {
          fileInput.name = `variants[${index}][images][${imgIndex}]`;
          fileInput.id = `variantImage-${index}-${imgIndex}`;
        }

        const existingInput = uploadArea.querySelector('.existing-image-data');
        if (existingInput) existingInput.name = `variants[${index}][existingImages][${imgIndex}]`;

        const browseBtn = uploadArea.querySelector('.upload-btn');
        if (browseBtn) browseBtn.setAttribute('onclick', `document.getElementById('variantImage-${index}-${imgIndex}').click()`);

        const deleteBtn = uploadArea.querySelector('.delete-image-btn');
        if (deleteBtn) deleteBtn.setAttribute('aria-label', `Delete image ${imgIndex + 1} for variant ${index + 1}`);
      });

      // update remove button onclick
      const removeBtn = variant.querySelector('.variant-controls button');
      if (removeBtn) removeBtn.setAttribute('onclick', `removeVariant(${index})`);
    });

    variantCount = variants.length;
  }

  // Client-side validation to give user immediate feedback before sending to server
  function validateForm() {
    const name = document.getElementById('name').value.trim();
    const price = Number(document.getElementById('price').value);
    const category = document.getElementById('category').value;
    let isValid = true;
    let errorMessage = '';

    if (!name) {
      isValid = false;
      errorMessage = 'Product name is required.';
    } else if (!price || price <= 0) {
      isValid = false;
      errorMessage = 'Price must be greater than 0.';
    } else if (!category) {
      isValid = false;
      errorMessage = 'Please select a category.';
    }

    document.querySelectorAll('.variant-container').forEach((variant, index) => {
      const colorInput = variant.querySelector('input[name*="[color]"]');
      const stockInput = variant.querySelector('input[name*="[stock]"]');
      const imageInputs = variant.querySelectorAll('input[type="file"]');
      const existingInputs = variant.querySelectorAll('.existing-image-data');

      const color = colorInput ? colorInput.value.trim() : '';
      const stock = stockInput ? Number(stockInput.value) : NaN;

      let imageCount = 0;
      imageInputs.forEach((fileInput, i) => {
        if (fileInput.files.length > 0 || (existingInputs[i] && existingInputs[i].value.trim())) {
          imageCount++;
        }
      });

      if (!color) {
        isValid = false;
        errorMessage = `Color is required for Variant ${index + 1}.`;
      } else if (Number.isNaN(stock) || stock < 0) {
        isValid = false;
        errorMessage = `Stock quantity must be non-negative for Variant ${index + 1}.`;
      } else if (imageCount !== 3) {
        isValid = false;
        errorMessage = `Variant ${index + 1} must have exactly 3 images.`;
      }
    });

    return { isValid, errorMessage };
  }

  // Form submission using axios (multipart)
  function setupFormSubmission() {
    form.addEventListener('submit', async function (e) {
      e.preventDefault();

      const { isValid, errorMessage } = validateForm();
      if (!isValid) {
        Swal.fire({
          title: 'Error!', text: errorMessage, icon: 'error',
          confirmButtonColor: '#000', customClass: { confirmButton: 'swal-confirm-black' }
        });
        return;
      }

      const submitBtn = form.querySelector('button[type="submit"]');
      submitBtn.disabled = true;
      submitBtn.classList.add('loading');

      Swal.fire({
        title: '<%= isEdit ? "Updating" : "Adding" %> Product...',
        text: 'Please wait while we process your product.',
        icon: 'info', showConfirmButton: false, allowOutsideClick: false, didOpen: () => Swal.showLoading(),
        customClass: { confirmButton: 'swal-confirm-black' }
      });

      try {
        const formData = new FormData(form);
        const url = "<%= isEdit ? `/vendor/products/edit-product/${product._id}` : '/vendor/products/add-product' %>";
        const method = "<%= isEdit ? 'put' : 'post' %>";

        const response = await axios({
          method,
          url,
          data: formData,
          headers: { 'Content-Type': 'multipart/form-data' }
        });

        Swal.fire({
          title: 'Success!', text: `Product <%= isEdit ? 'updated' : 'added' %> successfully.`, icon: 'success',
          confirmButtonColor: '#000', customClass: { confirmButton: 'swal-confirm-black' }
        }).then(() => window.location.href = '/vendor/products');
      } catch (err) {
        Swal.fire({
          title: 'Error!',
          text: err.response?.data?.message || `An error occurred while <%= isEdit ? 'updating' : 'adding' %> the product.`,
          icon: 'error',
          confirmButtonColor: '#000',
          customClass: { confirmButton: 'swal-confirm-black' }
        });
      } finally {
        submitBtn.disabled = false;
        submitBtn.classList.remove('loading');
      }
    });
  }

  document.addEventListener('DOMContentLoaded', init);
</script>
